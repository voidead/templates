server {
    if ($host = example.com) {
        return 301 https://$host$request_uri;
    } # managed by Certbot

    listen 80;
    server_name www.example.com example.com;

    return 301 https://example.com$request_uri;
}

server {
    listen 443 ssl http2;
    server_name www.example.com;
    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem; # managed by Certbot
    ssl_trusted_certificate /etc/letsencrypt/live/example.com/chain.pem;

    return 301 https://example.com$request_uri;
}

server {
    listen 443 ssl http2;
    server_name example.com;

    root /home/username/public_html;
    index index.php;

    # SSL parameters
    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem; # managed by Certbot
    ssl_trusted_certificate /etc/letsencrypt/live/example.com/chain.pem;

    # log files
    access_log /home/username/logs/access.log;
    error_log /home/username/logs/error.log;

    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }

    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }

    location / {
        try_files $uri $uri/ /index.php?$args;
    }

    location ~ \.php$ {
        include snippets/fastcgi-php.conf;
        fastcgi_pass unix:/run/php/phpversion-fpm.sock;
    }

    location ~* \.(txt|xml|js)$ {
    expires 1y;
    }

    location ~* \.(css)$ {
    expires 1y;
    }

    location ~* \.(flv|ico|pdf|avi|mov|ppt|doc|mp3|wmv|wav|mp4|m4v|ogg|webm|aac|eot|ttf|otf|woff|svg)$ {
    expires 1y;
    }

    location ~* \.(jpg|jpeg|png|gif|swf|webp)$ {
    expires 1y;
    }

    # BEGIN SMUSH-WEBP
    location ~* "wp-content\/(uploads\/)(.*.(?:png|jpe?g))" {
    add_header Vary Accept;
    set $image_path $2;
    if (-f "/var/www/html/wp-content/smush-webp/disable_smush_webp") {
        break;
    }
    if ($http_accept !~* "webp") {
        break;
    }
    try_files /wp-content/smush-webp/$image_path.webp $uri =404;
    }
    # END SMUSH-WEBP

    # BEGIN W3TC Minify cache
    location ~ /wp-content/cache/minify.*\.js$ {
        types {}
        default_type application/x-javascript;
        add_header Vary "Accept-Encoding";
    }

    location ~ /wp-content/cache/minify.*\.css$ {
        types {}
        default_type text/css;
        add_header Vary "Accept-Encoding";
    }

    location ~ /wp-content/cache/minify.*js\.gzip$ {
        gzip off;
        types {}
        default_type application/x-javascript;
        add_header Vary "Accept-Encoding";
        add_header Content-Encoding gzip;
    }

    location ~ /wp-content/cache/minify.*css\.gzip$ {
        gzip off;
        types {}
        default_type text/css;
        add_header Vary "Accept-Encoding";
        add_header Content-Encoding gzip;
    }
    # END W3TC Minify cache

    # BEGIN W3TC Browser Cache
    gzip on;
    gzip_types text/css text/x-component application/x-javascript application/javascript text/javascript text/x-js text/richtext image/svg+xml text/plain text/xsd text/xsl text/xml image/x-icon;
    # END W3TC Browser Cache

    # BEGIN W3TC CDN
    location ~ \.(ttf|ttc|otf|eot|woff|font.css)$ {
        add_header Access-Control-Allow-Origin "*";
    }
    # END W3TC CDN

    # BEGIN W3TC Minify core
    rewrite ^/wp-content/cache/minify.*/w3tc_rewrite_test$ /wp-content/plugins/w3-total-cache/pub/minify.php?w3tc_rewrite_test=1 last;
    set $w3tc_enc "";
    if ($http_accept_encoding ~ gzip) {
        set $w3tc_enc .gzip;
    }
    if (-f $request_filename$w3tc_enc) {
        rewrite (.*) $1$w3tc_enc break;
    }
    rewrite ^/wp-content/cache/minify/(.+/[X]+\.css)$ /wp-content/plugins/w3-total-cache/pub/minify.php?test_file=$1 last;
    rewrite ^/wp-content/cache/minify/(.+\.(css|js))$ /wp-content/plugins/w3-total-cache/pub/minify.php?file=$1 last;

    # END W3TC Minify core
}